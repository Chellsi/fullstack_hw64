extends layout

block content
  .test-page
    h1.page-title üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
    p.page-subtitle –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π –ø—Ä–æ–µ–∫—Ç—É
    
    .test-section
      h2 1. üñºÔ∏è Favicon
      .test-card
        h3 –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ favicon
        p –Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —ñ–∫–æ–Ω–∫—É —É –≤–∫–ª–∞–¥—Ü—ñ –±—Ä–∞—É–∑–µ—Ä–∞ - favicon –ø—Ä–∞—Ü—é—î! ‚úÖ
        .test-actions
          a.btn.btn-secondary(href='/favicon.ico', target='_blank') –í—ñ–¥–∫—Ä–∏—Ç–∏ favicon.ico
          button#checkFavicon.btn.btn-primary –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ favicon
        #faviconResult.test-result
    
    .test-section
      h2 2. üîê JWT –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
      .test-card
        h3 –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        if user
          p ‚úÖ –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫: <strong>#{user.username}</strong>
          p –†–æ–ª—å: <strong>#{user.role}</strong>
          .test-actions
            button#checkToken.btn.btn-primary –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ç–æ–∫–µ–Ω
            button#logout.btn.btn-danger –í–∏–π—Ç–∏
        else
          p ‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ
          .test-actions
            a.btn.btn-primary(href='/auth/login') –£–≤—ñ–π—Ç–∏
        #tokenResult.test-result
    
    .test-section
      h2 3. üç™ Cookies
      .test-card
        h3 –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ cookies
        p –ü–æ—Ç–æ—á–Ω–∞ —Ç–µ–º–∞: <strong>#{theme}</strong>
        .test-actions
          button#checkCookies.btn.btn-primary –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ cookies
        #cookiesResult.test-result
    
    .test-section
      h2 4. üé® –¢–µ–º–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
      .test-card
        h3 –ó–º—ñ–Ω–∞ —Ç–µ–º–∏
        p –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Ç–µ–º–∏ —Ç–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É - –≤–∏–±—ñ—Ä –∑–±–µ—Ä–µ–∂–µ—Ç—å—Å—è!
        .test-actions
          button#setLight.btn.btn-theme(class=theme === 'light' ? 'active' : '') ‚òÄÔ∏è –°–≤—ñ—Ç–ª–∞
          button#setDark.btn.btn-theme(class=theme === 'dark' ? 'active' : '') üåô –¢–µ–º–Ω–∞
        #themeResult.test-result
    
    .test-section
      h2 5. üì° API Endpoints
      .test-card
        h3 –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API
        .test-actions
          button#testUsers.btn.btn-primary –¢–µ—Å—Ç GET /users
          button#testArticles.btn.btn-primary –¢–µ—Å—Ç GET /articles
          button#testTheme.btn.btn-primary –¢–µ—Å—Ç GET /api/theme/current
        #apiResult.test-result
    
    .test-section
      h2 6. üé≠ –®–∞–±–ª–æ–Ω—ñ–∑–∞—Ç–æ—Ä–∏
      .test-card
        h3 PUG —Ç–∞ EJS
        p <strong>PUG:</strong> –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, Auth —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        p <strong>EJS:</strong> –°—Ç–∞—Ç—Ç—ñ
        .test-actions
          a.btn.btn-primary(href='/users/page') PUG: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
          a.btn.btn-primary(href='/articles/page') EJS: –°—Ç–∞—Ç—Ç—ñ
    
    .test-section
      h2 ‚úÖ –ß–µ–∫–ª–∏—Å—Ç
      .test-card
        ul.checklist
          li
            input(type='checkbox', id='check1')
            label(for='check1') Favicon –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —É –≤–∫–ª–∞–¥—Ü—ñ
          li
            input(type='checkbox', id='check2')
            label(for='check2') JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î
          li
            input(type='checkbox', id='check3')
            label(for='check3') Cookies –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è
          li
            input(type='checkbox', id='check4')
            label(for='check4') –¢–µ–º–∏ –ø–µ—Ä–µ–º–∏–∫–∞—é—Ç—å—Å—è
          li
            input(type='checkbox', id='check5')
            label(for='check5') API endpoints –ø—Ä–∞—Ü—é—é—Ç—å
          li
            input(type='checkbox', id='check6')
            label(for='check6') PUG —à–∞–±–ª–æ–Ω–∏ —Ä–µ–Ω–¥–µ—Ä—è—Ç—å—Å—è
          li
            input(type='checkbox', id='check7')
            label(for='check7') EJS —à–∞–±–ª–æ–Ω–∏ —Ä–µ–Ω–¥–µ—Ä—è—Ç—å—Å—è
  
  script.
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ favicon
    document.getElementById('checkFavicon').addEventListener('click', async () => {
      const result = document.getElementById('faviconResult');
      try {
        const response = await fetch('/favicon.ico');
        if (response.ok) {
          result.innerHTML = '<p class="success">‚úÖ Favicon –¥–æ—Å—Ç—É–ø–Ω–∏–π (200 OK)</p>';
        } else {
          result.innerHTML = '<p class="error">‚ùå Favicon –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (' + response.status + ')</p>';
        }
      } catch (error) {
        result.innerHTML = '<p class="error">‚ùå –ü–æ–º–∏–ª–∫–∞: ' + error.message + '</p>';
      }
    });
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if (document.getElementById('checkToken')) {
      document.getElementById('checkToken').addEventListener('click', async () => {
        const result = document.getElementById('tokenResult');
        try {
          const response = await fetch('/auth/me');
          const data = await response.json();
          if (data.success) {
            result.innerHTML = `<p class="success">‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π<br>User: ${data.user.username}<br>Role: ${data.user.role}</p>`;
          } else {
            result.innerHTML = '<p class="error">‚ùå ' + data.message + '</p>';
          }
        } catch (error) {
          result.innerHTML = '<p class="error">‚ùå –ü–æ–º–∏–ª–∫–∞: ' + error.message + '</p>';
        }
      });
    }
    
    // –í–∏—Ö—ñ–¥
    if (document.getElementById('logout')) {
      document.getElementById('logout').addEventListener('click', async () => {
        await fetch('/auth/logout', { method: 'POST' });
        window.location.reload();
      });
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ cookies
    document.getElementById('checkCookies').addEventListener('click', () => {
      const result = document.getElementById('cookiesResult');
      const cookies = document.cookie.split(';').map(c => c.trim()).filter(c => c);
      if (cookies.length > 0) {
        const cookieList = cookies.map(c => {
          const [name, value] = c.split('=');
          return `<li><strong>${name}:</strong> ${value}</li>`;
        }).join('');
        result.innerHTML = `<p class="success">‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ cookies:</p><ul>${cookieList}</ul>`;
      } else {
        result.innerHTML = '<p class="warning">‚ö†Ô∏è Cookies –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (httpOnly cookies –Ω–µ –≤–∏–¥–Ω—ñ –¥–ª—è JS)</p>';
      }
    });
    
    // –ó–º—ñ–Ω–∞ —Ç–µ–º–∏
    document.getElementById('setLight').addEventListener('click', () => setTheme('light'));
    document.getElementById('setDark').addEventListener('click', () => setTheme('dark'));
    
    async function setTheme(theme) {
      try {
        const response = await fetch('/api/theme/set', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ theme })
        });
        const data = await response.json();
        if (data.success) {
          document.getElementById('themeResult').innerHTML = 
            `<p class="success">‚úÖ –¢–µ–º—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ "${theme}". –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.</p>`;
          document.body.className = theme + '-theme';
          
          // –û–Ω–æ–≤–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É –∫–Ω–æ–ø–∫—É
          document.querySelectorAll('.btn-theme').forEach(btn => btn.classList.remove('active'));
          document.getElementById('set' + theme.charAt(0).toUpperCase() + theme.slice(1)).classList.add('active');
        }
      } catch (error) {
        document.getElementById('themeResult').innerHTML = 
          '<p class="error">‚ùå –ü–æ–º–∏–ª–∫–∞: ' + error.message + '</p>';
      }
    }
    
    // –¢–µ—Å—Ç API
    document.getElementById('testUsers').addEventListener('click', () => testAPI('/users'));
    document.getElementById('testArticles').addEventListener('click', () => testAPI('/articles'));
    document.getElementById('testTheme').addEventListener('click', () => testAPI('/api/theme/current'));
    
    async function testAPI(endpoint) {
      const result = document.getElementById('apiResult');
      try {
        const response = await fetch(endpoint, {
          headers: { 'Authorization': 'Bearer test-token' }
        });
        result.innerHTML = `<p class="success">‚úÖ ${endpoint}: ${response.status} ${response.statusText}</p>`;
      } catch (error) {
        result.innerHTML = `<p class="error">‚ùå ${endpoint}: ${error.message}</p>`;
      }
    }